{% extends "base/class.php.twig" %}

{% block file_path %}
Drupal\{{module_name}}\Form\{{ class_name }}.
{% endblock %}

{% block namespace_class %}
namespace Drupal\{{module_name}}\Form;
{% endblock %}

{% block use_class %}
{% block use_class_form %}
{% endblock %}
{% if services is not empty %}
use Symfony\Component\DependencyInjection\ContainerInterface;
{% endif %}
{% endblock %}

{% block class_declaration %}
class {{ class_name }}
{% endblock %}

{% block class_construct %}
{% if services is not empty %}
  public function __construct(
    ConfigFactoryInterface $config_factory,
    {{ servicesAsParameters(services)|join(',\n    ') }}
  )
  {
    parent::__construct($config_factory);
{{ serviceClassInitialization(services) }}
  }

{% endif %}
{% endblock %}

{% block class_create %}
{% if services is not empty %}
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('config.factory'),
{{ serviceClassInjection(services) }}
    );
  }

{% endif %}
{% endblock %}

{% block class_methods %}
  /**
   * {@inheritdoc}
   */
  public function getFormID()
  {
    return '{{form_id}}';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, array &$form_state)
  {
    $config = $this->config('{{module_name}}.{{form_id}}_config');
  {% for input in inputs %}
  $form['{{ input.name }}'] = [
      '#type' => '{{ input.type }}',
      '#title' => $this->t('{{ input.label }}'),
      '#description' => $this->t(''),
      '#default_value' => $config->get('{{ input.name }}'),
    ];
  {% endfor %}
  return parent::buildForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, array &$form_state)
  {
    return parent::validateForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, array &$form_state)
  {
    parent::submitForm($form, $form_state);

    $this->config('{{module_name}}.{{form_id}}_config')
    {% for input in inputs %}
      ->set('{{ input.name }}', $form_state['values']['{{ input.name }}'])
    {% endfor %}
    ->save();
  }
{% endblock %}
