{% extends "base/class.php.twig" %}

{% block file_path %}
Drupal\{{module}}\Plugin\Block\{{class_name}}.
{% endblock %}

{% block namespace_class %}
namespace Drupal\{{module}}\Plugin\Block;
{% endblock %}

{% block use_class %}
use Drupal\Core\Block\BlockBase;
{% if inputs %}
use Drupal\Core\Form\FormStateInterface;
{% endif %}
{% if services is not empty %}
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
{% endif %}
{% endblock %}

{% block class_declaration %}
/**
 * Provides a '{{class_name}}' block.
 *
 * @Block(
 *  id = "{{plugin_id}}",
 *  admin_label = @Translation("{{plugin_label}}")
 * )
 */
class {{class_name}} extends BlockBase {% if services is not empty %}implements ContainerFactoryPluginInterface {% endif %}
{% endblock %}

{% block class_construct %}
{% if services is not empty %}
  /**
   * Construct.
   *
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin_id for the plugin instance.
   * @param string $plugin_definition
   *   The plugin implementation definition.
   */
  public function __construct(
        array $configuration,
        $plugin_id,
        $plugin_definition,
        {{ servicesAsParameters(services)|join(', \n\t') }}
  ) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
{{ serviceClassInitialization(services) }}
  }

{% endif %}
{% endblock %}

{% block class_create %}
{% if services is not empty %}
  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
{{ serviceClassInjection(services) }}
    );
  }

{% endif %}
{% endblock %}

{% block class_methods %}
  /**
   * {@inheritdoc}
   */
  public function build() {
    return [
      '#markup' => '{{plugin_label}}',
    ];
  }

{% if inputs %}
  /**
   * Overrides \Drupal\block\BlockBase::blockForm().
   */
  public function blockForm($form, FormStateInterface $form_state) {
{% for input in inputs %}
    $form['{{ input.name }}'] = [
      '#type' => '{{ input.type }}',
      '#title' => $this->t('{{ input.label }}'),
      '#description' => $this->t(''),
      '#default_value' => $this->configuration['{{ input.name }}'],
    ];
{% endfor %}
    return $form;
  }

  /**
   * Overrides \Drupal\block\BlockBase::blockSubmit().
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
{% for input in inputs %}
    $this->configuration['{{ input.name }}'] = $form_state->getValue('{{ input.name }}');
{% endfor %}
  }
{% endif %}
{% endblock %}
